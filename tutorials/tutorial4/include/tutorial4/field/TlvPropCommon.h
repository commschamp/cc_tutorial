// Generated by commsdsl2comms v7.0.2

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref tutorial4::field::TlvProp field.

#pragma once

#include <cstdint>
#include <type_traits>
#include <utility>

namespace tutorial4
{

namespace field
{

/// @brief Scope for all the common definitions of the member fields of
///     @ref tutorial4::field::TlvProp field.
struct TlvPropMembersCommon
{
    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref tutorial4::field::TlvPropMembers::Prop4 field.
    struct Prop4MembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref tutorial4::field::TlvPropMembers::Prop4Members::Key field.
        struct KeyCommon
        {
            /// @brief Re-definition of the value type used by
            ///     tutorial4::field::TlvPropMembers::Prop4Members::Key field.
            using ValueType = std::uint8_t;

            /// @brief Name of the @ref tutorial4::field::TlvPropMembers::Prop4Members::Key field.
            static const char* name()
            {
                return "Key";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref tutorial4::field::TlvPropMembers::Prop4Members::Length field.
        struct LengthCommon
        {
            /// @brief Re-definition of the value type used by
            ///     tutorial4::field::TlvPropMembers::Prop4Members::Length field.
            using ValueType = std::uint8_t;

            /// @brief Name of the @ref tutorial4::field::TlvPropMembers::Prop4Members::Length field.
            static const char* name()
            {
                return "Length";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref tutorial4::field::TlvPropMembers::Prop4Members::Val field.
        struct ValCommon
        {
            /// @brief Re-definition of the value type used by
            ///     tutorial4::field::TlvPropMembers::Prop4Members::Val field.
            using ValueType = std::uint32_t;

            /// @brief Name of the @ref tutorial4::field::TlvPropMembers::Prop4Members::Val field.
            static const char* name()
            {
                return "Val";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref tutorial4::field::TlvPropMembers::Prop4 field.
    struct Prop4Common
    {
        /// @brief Name of the @ref tutorial4::field::TlvPropMembers::Prop4 field.
        static const char* name()
        {
            return "Prop4";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref tutorial4::field::TlvPropMembers::Prop5 field.
    struct Prop5MembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref tutorial4::field::TlvPropMembers::Prop5Members::Key field.
        struct KeyCommon
        {
            /// @brief Re-definition of the value type used by
            ///     tutorial4::field::TlvPropMembers::Prop5Members::Key field.
            using ValueType = std::uint8_t;

            /// @brief Name of the @ref tutorial4::field::TlvPropMembers::Prop5Members::Key field.
            static const char* name()
            {
                return "Key";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref tutorial4::field::TlvPropMembers::Prop5Members::Length field.
        struct LengthCommon
        {
            /// @brief Re-definition of the value type used by
            ///     tutorial4::field::TlvPropMembers::Prop5Members::Length field.
            using ValueType = std::uint8_t;

            /// @brief Name of the @ref tutorial4::field::TlvPropMembers::Prop5Members::Length field.
            static const char* name()
            {
                return "Length";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref tutorial4::field::TlvPropMembers::Prop5Members::Val field.
        struct ValCommon
        {
            /// @brief Re-definition of the value type used by
            ///     tutorial4::field::TlvPropMembers::Prop5Members::Val field.
            using ValueType = double;

            /// @brief Name of the @ref tutorial4::field::TlvPropMembers::Prop5Members::Val field.
            static const char* name()
            {
                return "Val";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref tutorial4::field::TlvPropMembers::Prop5 field.
    struct Prop5Common
    {
        /// @brief Name of the @ref tutorial4::field::TlvPropMembers::Prop5 field.
        static const char* name()
        {
            return "Prop5";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref tutorial4::field::TlvPropMembers::Prop6 field.
    struct Prop6MembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref tutorial4::field::TlvPropMembers::Prop6Members::Key field.
        struct KeyCommon
        {
            /// @brief Re-definition of the value type used by
            ///     tutorial4::field::TlvPropMembers::Prop6Members::Key field.
            using ValueType = std::uint8_t;

            /// @brief Name of the @ref tutorial4::field::TlvPropMembers::Prop6Members::Key field.
            static const char* name()
            {
                return "Key";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref tutorial4::field::TlvPropMembers::Prop6Members::Length field.
        struct LengthCommon
        {
            /// @brief Re-definition of the value type used by
            ///     tutorial4::field::TlvPropMembers::Prop6Members::Length field.
            using ValueType = std::uint8_t;

            /// @brief Name of the @ref tutorial4::field::TlvPropMembers::Prop6Members::Length field.
            static const char* name()
            {
                return "Length";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref tutorial4::field::TlvPropMembers::Prop6Members::Val field.
        struct ValCommon
        {
            /// @brief Name of the @ref tutorial4::field::TlvPropMembers::Prop6Members::Val field.
            static const char* name()
            {
                return "Val";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref tutorial4::field::TlvPropMembers::Prop6 field.
    struct Prop6Common
    {
        /// @brief Name of the @ref tutorial4::field::TlvPropMembers::Prop6 field.
        static const char* name()
        {
            return "Prop6";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref tutorial4::field::TlvPropMembers::Prop7 field.
    struct Prop7MembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref tutorial4::field::TlvPropMembers::Prop7Members::Key field.
        struct KeyCommon
        {
            /// @brief Re-definition of the value type used by
            ///     tutorial4::field::TlvPropMembers::Prop7Members::Key field.
            using ValueType = std::uint8_t;

            /// @brief Name of the @ref tutorial4::field::TlvPropMembers::Prop7Members::Key field.
            static const char* name()
            {
                return "Key";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref tutorial4::field::TlvPropMembers::Prop7Members::Length field.
        struct LengthCommon
        {
            /// @brief Re-definition of the value type used by
            ///     tutorial4::field::TlvPropMembers::Prop7Members::Length field.
            using ValueType = std::uint8_t;

            /// @brief Name of the @ref tutorial4::field::TlvPropMembers::Prop7Members::Length field.
            static const char* name()
            {
                return "Length";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref tutorial4::field::TlvPropMembers::Prop7Members::Val field.
        struct ValCommon
        {
            /// @brief Re-definition of the value type used by
            ///     tutorial4::field::TlvPropMembers::Prop7Members::Val field.
            using ValueType = std::uint64_t;

            /// @brief Name of the @ref tutorial4::field::TlvPropMembers::Prop7Members::Val field.
            static const char* name()
            {
                return "Val";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref tutorial4::field::TlvPropMembers::Prop7 field.
    struct Prop7Common
    {
        /// @brief Name of the @ref tutorial4::field::TlvPropMembers::Prop7 field.
        static const char* name()
        {
            return "Prop7";
        }
    };

    /// @brief Scope for all the common definitions of the member fields of
    ///     @ref tutorial4::field::TlvPropMembers::Any field.
    struct AnyMembersCommon
    {
        /// @brief Common types and functions for
        ///     @ref tutorial4::field::TlvPropMembers::AnyMembers::Key field.
        struct KeyCommon
        {
            /// @brief Re-definition of the value type used by
            ///     tutorial4::field::TlvPropMembers::AnyMembers::Key field.
            using ValueType = std::uint8_t;

            /// @brief Name of the @ref tutorial4::field::TlvPropMembers::AnyMembers::Key field.
            static const char* name()
            {
                return "Key";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref tutorial4::field::TlvPropMembers::AnyMembers::Length field.
        struct LengthCommon
        {
            /// @brief Re-definition of the value type used by
            ///     tutorial4::field::TlvPropMembers::AnyMembers::Length field.
            using ValueType = std::uint8_t;

            /// @brief Name of the @ref tutorial4::field::TlvPropMembers::AnyMembers::Length field.
            static const char* name()
            {
                return "Length";
            }

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return false;
            }
        };

        /// @brief Common types and functions for
        ///     @ref tutorial4::field::TlvPropMembers::AnyMembers::Val field.
        struct ValCommon
        {
            /// @brief Name of the @ref tutorial4::field::TlvPropMembers::AnyMembers::Val field.
            static const char* name()
            {
                return "Val";
            }
        };
    };

    /// @brief Common types and functions for
    ///     @ref tutorial4::field::TlvPropMembers::Any field.
    struct AnyCommon
    {
        /// @brief Name of the @ref tutorial4::field::TlvPropMembers::Any field.
        static const char* name()
        {
            return "Any";
        }
    };
};

/// @brief Common types and functions for
///     @ref tutorial4::field::TlvProp field.
struct TlvPropCommon
{
    /// @brief Single member name info entry
    using MemberNameInfo = const char*;

    /// @brief Type returned from @ref memberNamesMap() member function.
    /// @details The @b first value of the pair is pointer to the map array,
    ///     The @b second value of the pair is the size of the array.
    using MemberNamesMapInfo = std::pair<const MemberNameInfo*, std::size_t>;

    /// @brief Name of the @ref tutorial4::field::TlvProp field.
    static const char* name()
    {
        return "TlvProp";
    }

    /// @brief Retrieve name of the member
    static const char* memberName(std::size_t idx)
    {
        auto namesMapInfo = memberNamesMap();
        if (namesMapInfo.second <= idx) {
            return nullptr;
        }

        return namesMapInfo.first[idx];
    }

    /// @brief Retrieve map of members names
    static MemberNamesMapInfo memberNamesMap()
    {
        static const MemberNameInfo Map[] = {
            TlvPropMembersCommon::Prop4Common::name(),
            TlvPropMembersCommon::Prop5Common::name(),
            TlvPropMembersCommon::Prop6Common::name(),
            TlvPropMembersCommon::Prop7Common::name(),
            TlvPropMembersCommon::AnyCommon::name()
        };
        static const std::size_t MapSize = std::extent<decltype(Map)>::value;

        return std::make_pair(&Map[0], MapSize);
    }
};

} // namespace field

} // namespace tutorial4
