// Generated by commsdsl2comms v7.0.2

/// @file
/// @brief Contains definition of <b>"Message 3"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "comms/MessageBase.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"
#include "tutorial14/MsgId.h"
#include "tutorial14/field/FieldBase.h"
#include "tutorial14/message/Msg3Common.h"
#include "tutorial14/options/DefaultOptions.h"

#include <iostream>

namespace tutorial14
{

namespace message
{

/// @brief Fields of @ref Msg3.
/// @tparam TOpt Extra options
/// @see @ref Msg3
/// @headerfile tutorial14/message/Msg3.h
template <typename TOpt = tutorial14::options::DefaultOptions>
struct Msg3Fields
{
    /// @brief Definition of <b>"F1"</b> field.
    class F1 : public
        comms::field::IntValue<
            tutorial14::field::FieldBase<>,
            std::uint32_t,
            comms::option::def::HasName
        >
    {
        using Base =
            comms::field::IntValue<
                tutorial14::field::FieldBase<>,
                std::uint32_t,
                comms::option::def::HasName
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return tutorial14::message::Msg3FieldsCommon::F1Common::hasSpecials();
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return tutorial14::message::Msg3FieldsCommon::F1Common::name();
        }
    };

    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        F1
    >;
};

/// @brief Definition of <b>"Message 3"</b> message class.
/// @details
///     See @ref Msg3Fields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile tutorial14/message/Msg3.h
template <typename TMsgBase, typename TOpt = tutorial14::options::DefaultOptions>
class Msg3 : public
    comms::MessageBase<
        TMsgBase,
        comms::option::def::StaticNumIdImpl<tutorial14::MsgId_M3>,
        comms::option::def::FieldsImpl<typename Msg3Fields<TOpt>::All>,
        comms::option::def::MsgType<Msg3<TMsgBase, TOpt> >,
        comms::option::def::HasName,
        comms::option::def::HasCustomRefresh
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            comms::option::def::StaticNumIdImpl<tutorial14::MsgId_M3>,
            comms::option::def::FieldsImpl<typename Msg3Fields<TOpt>::All>,
            comms::option::def::MsgType<Msg3<TMsgBase, TOpt> >,
            comms::option::def::HasName,
            comms::option::def::HasCustomRefresh
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_f1 index, @b Field_f1 type and @b field_f1() access fuction
    ///         for @ref Msg3Fields::F1 field.
    COMMS_MSG_FIELDS_NAMES(
        f1
    );

    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 4U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 4U, "Unexpected max serialisation length");

    /// @brief Name of the message.
    static const char* doName()
    {
        return tutorial14::message::Msg3Common::name();
    }

    /// @brief Custom read functionality
    template <typename TIter>
    comms::ErrorStatus doRead(TIter& iter, std::size_t len)
    {
        std::cout << "Call of custom " << __FUNCTION__ << std::endl;
        return Base::doRead(iter, len);
    }

    /// @brief Custom write functionality
    template <typename TIter>
    comms::ErrorStatus doWrite(TIter& iter, std::size_t len) const
    {
        std::cout << "Call of custom " << __FUNCTION__ << std::endl;
        return Base::doWrite(iter, len);
    }

    /// @brief Custom length calculation functionality
    std::size_t doLength() const
    {
        std::cout << "Call of custom " << __FUNCTION__ << std::endl;
        return Base::doLength();
    }

    /// @brief Custom validity check functionality
    bool doValid() const
    {
        std::cout << "Call of custom " << __FUNCTION__ << std::endl;
        return Base::doValid();
    }

    /// @brief Custom refresh functionality
    bool doRefresh()
    {
        std::cout << "Call of custom " << __FUNCTION__ << std::endl;
        return Base::doRefresh();
    }
};

} // namespace message

} // namespace tutorial14
