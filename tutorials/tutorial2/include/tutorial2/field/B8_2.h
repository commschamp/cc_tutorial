// Generated by commsdsl2comms v7.0.2

/// @file
/// @brief Contains definition of <b>"B8_2"</b> field.

#pragma once

#include <cmath>
#include <cstdint>
#include <limits>
#include <tuple>
#include "comms/field/ArrayList.h"
#include "comms/field/BitmaskValue.h"
#include "comms/field/Bundle.h"
#include "comms/field/FloatValue.h"
#include "comms/field/IntValue.h"
#include "comms/options.h"
#include "tutorial2/field/B8_2Common.h"
#include "tutorial2/field/FieldBase.h"
#include "tutorial2/options/DefaultOptions.h"

namespace tutorial2
{

namespace field
{

/// @brief Scope for all the member fields of
///     @ref B8_2 field.
/// @tparam TOpt Protocol options.
template <typename TOpt = tutorial2::options::DefaultOptions>
struct B8_2Members
{
    /// @brief Definition of <b>"M1"</b> field.
    class M1 : public
        comms::field::FloatValue<
            tutorial2::field::FieldBase<>,
            float,
            comms::option::def::HasName
        >
    {
        using Base =
            comms::field::FloatValue<
                tutorial2::field::FieldBase<>,
                float,
                comms::option::def::HasName
            >;
    public:
        /// @brief Default constructor.
        M1()
        {
            Base::setValue(std::numeric_limits<ValueType>::quiet_NaN());
        }

        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;

        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return tutorial2::field::B8_2MembersCommon::M1Common::hasSpecials();
        }

        /// @brief Requested number of digits after decimal point when value
        ///     is displayed.
        static constexpr unsigned displayDecimals()
        {
            return 0U;
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return tutorial2::field::B8_2MembersCommon::M1Common::name();
        }
    };

    /// @brief Definition of <b>"M2"</b> field.
    class M2 : public
        comms::field::BitmaskValue<
            tutorial2::field::FieldBase<>,
            comms::option::def::HasName,
            comms::option::def::FixedLength<1U>,
            comms::option::def::BitmaskReservedBits<0xDEU, 0x0U>
        >
    {
        using Base =
            comms::field::BitmaskValue<
                tutorial2::field::FieldBase<>,
                comms::option::def::HasName,
                comms::option::def::FixedLength<1U>,
                comms::option::def::BitmaskReservedBits<0xDEU, 0x0U>
            >;
    public:
        /// @brief Provide names for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///      The generated enum values:
        ///      @li @b BitIdx_SomeBit.
        ///      @li @b BitIdx_SomeOtherbit.
        COMMS_BITMASK_BITS(
            SomeBit=0,
            SomeOtherbit=5
        );

        /// @brief Generates independent access functions for internal bits.
        /// @details See definition of @b COMMS_BITMASK_BITS_ACCESS macro
        ///     related to @b comms::field::BitmaskValue class from COMMS library
        ///     for details.
        ///
        ///     The generated access functions are:
        ///      @li @b getBitValue_SomeBit() and @b setBitValue_SomeBit().
        ///      @li @b getBitValue_SomeOtherbit() and @b setBitValue_SomeOtherbit().
        COMMS_BITMASK_BITS_ACCESS(
            SomeBit,
            SomeOtherbit
        );

        /// @brief Retrieve name of the bit.
        /// @see @ref tutorial2::field::B8_2MembersCommon::M2Common::bitName().
        static const char* bitName(std::size_t idx)
        {
            return tutorial2::field::B8_2MembersCommon::M2Common::bitName(idx);
        }

        /// @brief Retrieve name of the bit.
        /// @see @ref tutorial2::field::B8_2MembersCommon::M2Common::bitName().
        static const char* bitName(BitIdx idx)
        {
            return bitName(static_cast<std::size_t>(idx));
        }

        /// @brief Name of the field.
        static const char* name()
        {
            return tutorial2::field::B8_2MembersCommon::M2Common::name();
        }
    };

    /// @brief Scope for all the member fields of
    ///     @ref M3 field.
    struct M3Members
    {
        /// @brief Definition of <b>"Length"</b> field.
        class Length : public
            comms::field::IntValue<
                tutorial2::field::FieldBase<>,
                std::uint8_t,
                comms::option::def::HasName
            >
        {
            using Base =
                comms::field::IntValue<
                    tutorial2::field::FieldBase<>,
                    std::uint8_t,
                    comms::option::def::HasName
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;

            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return tutorial2::field::B8_2MembersCommon::M3MembersCommon::LengthCommon::hasSpecials();
            }

            /// @brief Name of the field.
            static const char* name()
            {
                return tutorial2::field::B8_2MembersCommon::M3MembersCommon::LengthCommon::name();
            }
        };
    };

    /// @brief Definition of <b>"M3"</b> field.
    class M3 : public
        comms::field::ArrayList<
            tutorial2::field::FieldBase<>,
            std::uint8_t,
            typename TOpt::field::B8_2Members::M3,
            comms::option::def::HasName,
            comms::option::def::SequenceSerLengthFieldPrefix<typename M3Members::Length>
        >
    {
        using Base =
            comms::field::ArrayList<
                tutorial2::field::FieldBase<>,
                std::uint8_t,
                typename TOpt::field::B8_2Members::M3,
                comms::option::def::HasName,
                comms::option::def::SequenceSerLengthFieldPrefix<typename M3Members::Length>
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return tutorial2::field::B8_2MembersCommon::M3Common::name();
        }
    };

    /// @brief All members bundled in @b std::tuple.
    using All =
        std::tuple<
           M1,
           M2,
           M3
        >;
};

/// @brief Definition of <b>"B8_2"</b> field.
/// @details
///     Some Field Description
/// @tparam TOpt Protocol options.
/// @tparam TExtraOpts Extra options.
template <typename TOpt = tutorial2::options::DefaultOptions, typename... TExtraOpts>
class B8_2 : public
    comms::field::Bundle<
        tutorial2::field::FieldBase<>,
        typename B8_2Members<TOpt>::All,
        TExtraOpts...,
        comms::option::def::HasName,
        comms::option::def::HasVersionDependentMembers<false>
    >
{
    using Base =
        comms::field::Bundle<
            tutorial2::field::FieldBase<>,
            typename B8_2Members<TOpt>::All,
            TExtraOpts...,
            comms::option::def::HasName,
            comms::option::def::HasVersionDependentMembers<false>
        >;
public:
    /// @brief Allow access to internal fields.
    /// @details See definition of @b COMMS_FIELD_MEMBERS_NAMES macro
    ///     related to @b comms::field::Bundle class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and access functions are:
    ///     @li @b FieldIdx_m1 index, @b Field_m1 type and @b field_m1() access function -
    ///         for tutorial2::field::B8_2Members::M1 member field.
    ///     @li @b FieldIdx_m2 index, @b Field_m2 type and @b field_m2() access function -
    ///         for tutorial2::field::B8_2Members::M2 member field.
    ///     @li @b FieldIdx_m3 index, @b Field_m3 type and @b field_m3() access function -
    ///         for tutorial2::field::B8_2Members::M3 member field.
    COMMS_FIELD_MEMBERS_NAMES(
        m1,
        m2,
        m3
    );

    /// @brief Name of the field.
    static const char* name()
    {
        return tutorial2::field::B8_2Common::name();
    }
};

} // namespace field

} // namespace tutorial2
