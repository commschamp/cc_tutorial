// Generated by commsdsl2comms v5.0.0

/// @file
/// @brief Contains common template parameters independent functionality of
///    @ref tutorial2::field::F5_2 field.

#pragma once

#include <limits>

namespace tutorial2
{

namespace field
{


/// @brief Common types and functions for
///     @ref tutorial2::field::F5_2 field.
struct F5_2Common
{
    /// @brief Re-definition of the value type used by
    ///     tutorial2::field::F5_2 field.
    using ValueType = double;
    
    /// @brief Single special value name info entry.
    using SpecialNameInfo = std::pair<ValueType, const char*>;
    
    /// @brief Type returned from @ref specialNamesMap() member function.
    /// @details The @b first value of the pair is pointer to the map array,
    ///     The @b second value of the pair is the size of the array.
    using SpecialNamesMapInfo = std::pair<const SpecialNameInfo*, std::size_t>;
    
    /// @brief Name of the @ref tutorial2::field::F5_2 field.
    static const char* name()
    {
        return "F5_2";
    }
    
    /// @brief Compile time detection of special values presence.
    static constexpr bool hasSpecials()
    {
        return true;
    }
    
    /// @brief Special value <b>"S3"</b>.
    static constexpr ValueType valueS3()
    {
        return -std::numeric_limits<ValueType>::infinity();
    }
    
    /// @brief Special value <b>"S4"</b>.
    static constexpr ValueType valueS4()
    {
        return static_cast<ValueType>(5.123000);
    }
    
    /// @brief Special value <b>"S2"</b>.
    static constexpr ValueType valueS2()
    {
        return std::numeric_limits<ValueType>::infinity();
    }
    
    /// @brief Special value <b>"S1"</b>.
    static constexpr ValueType valueS1()
    {
        return std::numeric_limits<ValueType>::quiet_NaN();
    }
    
    
    /// @brief Retrieve map of special value names
    static SpecialNamesMapInfo specialNamesMap()
    {
        static const SpecialNameInfo Map[] = {
            std::make_pair(valueS3(), "S3"),
            std::make_pair(valueS4(), "S4"),
            std::make_pair(valueS2(), "S2"),
            std::make_pair(valueS1(), "S1")
        };
        static const std::size_t MapSize = std::extent<decltype(Map)>::value;
    
        return std::make_pair(&Map[0], MapSize);
    }
    
    
};

} // namespace field

} // namespace tutorial2

