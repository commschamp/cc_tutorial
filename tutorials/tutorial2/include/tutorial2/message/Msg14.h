// Generated by commsdsl2comms v5.0.0

/// @file
/// @brief Contains definition of <b>"Message 14"</b> message and its fields.

#pragma once

#include <cstdint>
#include <tuple>
#include "comms/MessageBase.h"
#include "comms/field/IntValue.h"
#include "comms/field/Optional.h"
#include "comms/options.h"
#include "tutorial2/MsgId.h"
#include "tutorial2/field/FieldBase.h"
#include "tutorial2/message/Msg14Common.h"
#include "tutorial2/options/DefaultOptions.h"


namespace tutorial2
{

namespace message
{


/// @brief Fields of @ref Msg14.
/// @tparam TOpt Extra options
/// @see @ref Msg14
/// @headerfile tutorial2/message/Msg14.h
template <typename TOpt = tutorial2::options::DefaultOptions>
struct Msg14Fields
{
    /// @brief Definition of <b>"F1"</b> field.
    class F1 : public
        comms::field::IntValue<
            tutorial2::field::FieldBase<>,
            std::int8_t
        >
    {
        using Base =
            comms::field::IntValue<
                tutorial2::field::FieldBase<>,
                std::int8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return tutorial2::message::Msg14FieldsCommon::F1Common::hasSpecials();
        }
        
        
        /// @brief Name of the field.
        static const char* name()
        {
            return tutorial2::message::Msg14FieldsCommon::F1Common::name();
        }
        
    
    };
    
    
    /// @brief Definition of <b>"F2"</b> field.
    class F2 : public
        comms::field::IntValue<
            tutorial2::field::FieldBase<>,
            std::int8_t
        >
    {
        using Base =
            comms::field::IntValue<
                tutorial2::field::FieldBase<>,
                std::int8_t
            >;
    public:
        /// @brief Re-definition of the value type.
        using ValueType = typename Base::ValueType;
        
        /// @brief Compile time detection of special values presence.
        static constexpr bool hasSpecials()
        {
            return tutorial2::message::Msg14FieldsCommon::F2Common::hasSpecials();
        }
        
        
        /// @brief Name of the field.
        static const char* name()
        {
            return tutorial2::message::Msg14FieldsCommon::F2Common::name();
        }
        
    
    };
    
    
    /// @brief Scope for all the member fields of
    ///     @ref F3 field.
    struct F3Members
    {
        /// @brief Definition of <b>"ActF3"</b> field.
        class ActF3 : public
            comms::field::IntValue<
                tutorial2::field::FieldBase<>,
                std::uint16_t
            >
        {
            using Base =
                comms::field::IntValue<
                    tutorial2::field::FieldBase<>,
                    std::uint16_t
                >;
        public:
            /// @brief Re-definition of the value type.
            using ValueType = typename Base::ValueType;
            
            /// @brief Compile time detection of special values presence.
            static constexpr bool hasSpecials()
            {
                return tutorial2::message::Msg14FieldsCommon::F3MembersCommon::ActF3Common::hasSpecials();
            }
            
            
            /// @brief Name of the field.
            static const char* name()
            {
                return tutorial2::message::Msg14FieldsCommon::F3MembersCommon::ActF3Common::name();
            }
            
        
        };
        
        
    };
    
    /// @brief Definition of <b>"F3"</b> field.
    class F3 : public
        comms::field::Optional<
            typename F3Members::ActF3,
            comms::option::def::MissingByDefault
        >
    {
        using Base =
            comms::field::Optional<
                typename F3Members::ActF3,
                comms::option::def::MissingByDefault
            >;
    public:
        /// @brief Name of the field.
        static const char* name()
        {
            return tutorial2::message::Msg14FieldsCommon::F3Common::name();
        }
        
    
    };
    
    
    /// @brief All the fields bundled in std::tuple.
    using All = std::tuple<
        F1,
        F2,
        F3
    >;
};

/// @brief Definition of <b>"Message 14"</b> message class.
/// @details
///     See @ref Msg14Fields for definition of the fields this message contains.
/// @tparam TMsgBase Base (interface) class.
/// @tparam TOpt Extra options
/// @headerfile tutorial2/message/Msg14.h
template <typename TMsgBase, typename TOpt = tutorial2::options::DefaultOptions>
class Msg14 : public
    comms::MessageBase<
        TMsgBase,
        comms::option::def::StaticNumIdImpl<tutorial2::MsgId_M14>,
        comms::option::def::FieldsImpl<typename Msg14Fields<TOpt>::All>,
        comms::option::def::MsgType<Msg14<TMsgBase, TOpt> >,
        comms::option::def::HasName,
        comms::option::def::HasCustomRefresh
    >
{
    // Redefinition of the base class type
    using Base =
        comms::MessageBase<
            TMsgBase,
            comms::option::def::StaticNumIdImpl<tutorial2::MsgId_M14>,
            comms::option::def::FieldsImpl<typename Msg14Fields<TOpt>::All>,
            comms::option::def::MsgType<Msg14<TMsgBase, TOpt> >,
            comms::option::def::HasName,
            comms::option::def::HasCustomRefresh
        >;

public:
    /// @brief Provide names and allow access to internal fields.
    /// @details See definition of @b COMMS_MSG_FIELDS_NAMES macro
    ///     related to @b comms::MessageBase class from COMMS library
    ///     for details.
    ///
    ///     The generated values, types and functions are:
    ///     @li @b FieldIdx_f1 index, @b Field_f1 type and @b field_f1() access fuction
    ///         for @ref Msg14Fields::F1 field.
    ///     @li @b FieldIdx_f2 index, @b Field_f2 type and @b field_f2() access fuction
    ///         for @ref Msg14Fields::F2 field.
    ///     @li @b FieldIdx_f3 index, @b Field_f3 type and @b field_f3() access fuction
    ///         for @ref Msg14Fields::F3 field.
    COMMS_MSG_FIELDS_NAMES(
        f1,
        f2,
        f3
    );
    
    // Compile time check for serialisation length.
    static const std::size_t MsgMinLen = Base::doMinLength();
    static const std::size_t MsgMaxLen = Base::doMaxLength();
    static_assert(MsgMinLen == 2U, "Unexpected min serialisation length");
    static_assert(MsgMaxLen == 4U, "Unexpected max serialisation length");
    
    /// @brief Name of the message.
    static const char* doName()
    {
        return tutorial2::message::Msg14Common::name();
    }
    
    /// @brief Generated read functionality.
    template <typename TIter>
    comms::ErrorStatus doRead(TIter& iter, std::size_t len)
    {
        auto es = comms::ErrorStatus::Success;
        do {
            es = Base::template doReadUntilAndUpdateLen<FieldIdx_f3>(iter, len);
            if (es != comms::ErrorStatus::Success) {
                break;
            }
            
            readPrepare_f3();
            
            es = Base::template doReadFrom<FieldIdx_f3>(iter, len);
            
        } while (false);
        return es;
    }
    
    /// @brief Generated refresh functionality.
    bool doRefresh()
    {
       bool updated = Base::doRefresh();
       updated = refresh_f3() || updated;
       return updated;
    }
    

private:
    void readPrepare_f3()
    {
        refresh_f3();
        
    }
    
    bool refresh_f3()
    {
        auto mode = comms::field::OptionalMode::Missing;
        if ((field_f1().getValue() > static_cast<typename Field_f1::ValueType>(0)) ||
             (((field_f1().getValue() == static_cast<typename Field_f1::ValueType>(0)) &&
               (field_f2().getValue() != static_cast<typename Field_f2::ValueType>(0))))) {
            mode = comms::field::OptionalMode::Exists;
        }
        
        if (field_f3().getMode() == mode) {
            return false;
        }
        
        field_f3().setMode(mode);
        return true;
        
    }
    

};

} // namespace message

} // namespace tutorial2


